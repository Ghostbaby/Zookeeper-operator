name: CI

on:
  push:
    branches:
    - '**'
  pull_request:

jobs:
  docker-lint:
    runs-on: ubuntu-latest
    name: DockerLint
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: lint
      uses: brpaz/hadolint-action@master

  # Golang tests
  go-lint:
    runs-on: ubuntu-latest
    name: GoLint
    steps:
    - uses: actions/checkout@v2
    - name: Run golangci-lint
      uses: actions-contrib/golangci-lint@v1
      with:
        golangci_lint_version: 1.23
        args: run -v --timeout 300s

  go-tests:
    runs-on: ubuntu-latest
    name: go tests

    steps:
    - name: Set up Go
      uses: actions/setup-go@v1
      with:
        go-version: 1.14

    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: make test
      run: |
        go env
        test -d /usr/local/kubebuilder || (curl -sSL "https://go.kubebuilder.io/dl/2.3.1/$(go env GOOS)/$(go env GOARCH)" | tar -xz -C /tmp/;sudo mv /tmp/kubebuilder_2.3.1_$(go env GOOS)_$(go env GOARCH) /usr/local/kubebuilder)
        make test

  k8s-tests:
    runs-on: ubuntu-latest
    name: K8S v${{ matrix.k8sVersion }} (CM v${{ matrix.certManager }})

    strategy:
      fail-fast: false
      matrix:
        # https://github.com/jetstack/cert-manager/tags
        #certManager: ["0.15.2", "0.16.1"]
        certManager: ["0.16.1"]
        # https://snapcraft.io/microk8s
        #k8sVersion: ["1.17", "1.18", "1.19"]
        k8sVersion: ["1.19"]

    steps:
    - name: Set up Go
      uses: actions/setup-go@v1
      with:
        go-version: 1.14

    - name: Install Kubernetes v${{ matrix.k8sVersion }}
      run: |
        which kind || (curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/v0.7.0/kind-$(uname)-amd64; sudo install kind /usr/local/bin/)
        test -d /usr/local/kubebuilder || (curl -sSL "https://go.kubebuilder.io/dl/2.3.1/$(go env GOOS)/$(go env GOARCH)" | tar -xz -C /tmp/;sudo mv /tmp/kubebuilder_2.3.1_$(go env GOOS)_$(go env GOARCH) /usr/local/kubebuilder)
        cat <<EOF | kind create cluster --name zookeeper --config=-
        kind: Cluster
        apiVersion: kind.x-k8s.io/v1alpha4
        nodes:
        - role: control-plane
        - role: worker
        - role: worker
        - role: worker
        EOF

    - uses: actions/checkout@v2

    - name: Install CertManager v${{ matrix.certManager }}
      run: |
        # Try the recet way to install crd or fallback to the old one
        version='${{ matrix.certManager }}'
        kubectl apply -f "https://github.com/jetstack/cert-manager/releases/download/v${version}/cert-manager.yaml"
        sleep 5
        kubectl -n cert-manager wait --for=condition=Available deployment --all --timeout 300s

    - name: Install Ingress
      run: |
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.35.0/deploy/static/provider/baremetal/deploy.yaml
        sleep 5
        kubectl -n ingress-nginx wait --for=condition=Available deployment --all --timeout 300s

    - name: Install zookeeper-operator
      run: |
        set -xe
        make install
        make deploy
        sleep 10
        kubectl -n zookeeper-operator-system wait --for=condition=Available deployment --all --timeout 300s
        kubectl get all -n zookeeper-operator-system

#     - name: Install oam-kubernetes-runtime
#       run: |
#         curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
#         kubectl create namespace oam-system
#         helm repo add crossplane-master https://charts.crossplane.io/master/
#         helm install oam --namespace oam-system crossplane-master/oam-kubernetes-runtime --devel

    - name: Install zookeeper
      run: |
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: Namespace
        metadata:
          name: pg
        ---
        apiVersion: cache.ghostbaby.io/v1alpha1
        kind: Workload
        metadata:
          name: workload-sample
          namespace: pg
        spec:
          version: v3.5.6
          replicas: 3
          cluster:
            name: test
            resources:
              requests:
                cpu: 100m
                memory: 0.5Gi
            exporter:
              exporter: true
              exporterImage: ghostbaby/zookeeper_exporter
              exporterVersion: v3.5.6
              disableExporterProbes: false
        EOF
        free -h
        # currently we don't have a good way to wait install done
        for i in $(seq 1 6);do
          sleep 30
          echo $i
          kubectl get zk -n pg
          kubectl get pods -n pg
        done
        if ! kubectl -n pg wait --for=condition=Ready pod --all --timeout 600s ;then
          echo install zookeeper failed
          kubectl get zk -n pg

          for n in $(kubectl get -n pg po |grep -v Running|grep 'workload-sample'|awk '{print $1}');do
            echo describe $n
            kubectl -n pg describe pod $n
          done
        else
          kubectl get zk -n pg
        fi